```
class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        string row="->";
        vector<string> res;
        if(nums.empty()) return res;
        int left=0;
        int right=0;
        while(true){
            right=left+1;
            if(right==nums.size()){
                res.push_back(to_string(nums[left]));
                return res;
            }
            while(true){
                if(right==nums.size()){
                    if(left==right-1){
                        res.push_back(to_string(nums[left]));
                        return res;
                    }
                    else{
                        res.push_back(to_string(nums[left])+row+to_string(nums[right-1]));
                        return res;
                    }
                }
                if(nums[right]==nums[right-1]+1){
                    right++;
                }
                else{
                    if(left==right-1){
                        res.push_back(to_string(nums[left]));
                        break;
                    }
                    else{
                        res.push_back(to_string(nums[left])+row+to_string(nums[right-1]));
                        break;
                    }
                }
            }
            left=right;
        }
        return res;
    }
};
```
Runtime: 4 ms, faster than 52.69% of C++ online submissions for Summary Ranges.
Memory Usage: 8.4 MB, less than 92.31% of C++ online submissions for Summary Ranges.
I think  it is complex and uneasy to read;





big bro 's code:
```
class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
    const int size_n = nums.size();
    vector<string> res;
    if ( 0 == size_n) return res;
    for (int i = 0; i < size_n;) {
        int start = i, end = i;
        while (end + 1 < size_n && nums[end+1] == nums[end] + 1) end++;
        if (end > start) res.push_back(to_string(nums[start]) + "->" + to_string(nums[end]));
        else res.push_back(to_string(nums[start]));
        i = end+1;
    }
    return res;
}
};
```
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Summary Ranges.
Memory Usage: 8.4 MB, less than 92.31% of C++ online submissions for Summary Ranges.
good
